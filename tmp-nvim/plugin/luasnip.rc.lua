--  local M = {}
--  
--  
--  M.luasnip = function()
--    local present, luasnip = pcall(require, "luasnip")
--  
--    if not present then
--      return
--    end
--  
--    local options = {
--      history = true,
--      updateevents = "TextChanged,TextChangedI",
--    }
--  
--    options = load_override(options, "L3MON4D3/LuaSnip")
--    luasnip.config.set_config(options)
--    require("luasnip.loaders.from_vscode").lazy_load()
--    require("luasnip.loaders.from_vscode").lazy_load { paths = vim.g.luasnippets_path or "" }
--  
--    vim.api.nvim_create_autocmd("InsertLeave", {
--      callback = function()
--        if
--          require("luasnip").session.current_nodes[vim.api.nvim_get_current_buf()]
--          and not require("luasnip").session.jump_active
--        then
--          require("luasnip").unlink_current()
--        end
--      end,
--    })
--  end
--  
--  return M


-- require("luasnip.loaders.from_vscode").lazy_load()

--  " press <Tab> to expand or jump in a snippet. These can also be mapped separately
--  " via <Plug>luasnip-expand-snippet and <Plug>luasnip-jump-next.
--  imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 
--  " -1 for jumping backwards.
--  inoremap <silent> <S-Tab> <cmd>lua require'luasnip'.jump(-1)<Cr>
--  
--  snoremap <silent> <Tab> <cmd>lua require('luasnip').jump(1)<Cr>
--  snoremap <silent> <S-Tab> <cmd>lua require('luasnip').jump(-1)<Cr>
--  
--  " For changing choices in choiceNodes (not strictly necessary for a basic setup).
-- imap <silent><expr> <C-E> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-E>'
--  smap <silent><expr> <C-E> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-E>'
--
